[{"/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/index.js":"1","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/reportWebVitals.js":"2","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/App.js":"3","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Total_alliance.js":"4","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Home.js":"5","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Alliance.js":"6","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Threat.js":"7","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/components/Header.js":"8","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Total_alliance_chart.js":"9","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Alliance_chart.js":"10","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Threat_chart.js":"11","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/GDP.js":"12","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/GDP_chart.js":"13","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Area.js":"14","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/AreaChart.js":"15","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Area2.js":"16","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/AreaChart2.js":"17"},{"size":500,"mtime":1615069472000,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1615069472000,"results":"20","hashOfConfig":"19"},{"size":1154,"mtime":1615191498242,"results":"21","hashOfConfig":"19"},{"size":1009,"mtime":1615069472000,"results":"22","hashOfConfig":"19"},{"size":267,"mtime":1615069472000,"results":"23","hashOfConfig":"19"},{"size":437,"mtime":1615069472000,"results":"24","hashOfConfig":"19"},{"size":457,"mtime":1615069472000,"results":"25","hashOfConfig":"19"},{"size":712,"mtime":1615455664090,"results":"26","hashOfConfig":"19"},{"size":7830,"mtime":1615157904620,"results":"27","hashOfConfig":"19"},{"size":14993,"mtime":1615069472000,"results":"28","hashOfConfig":"19"},{"size":11503,"mtime":1615069472000,"results":"29","hashOfConfig":"19"},{"size":1215,"mtime":1615472593378,"results":"30","hashOfConfig":"19"},{"size":7031,"mtime":1615470103132,"results":"31","hashOfConfig":"19"},{"size":1159,"mtime":1615457660895,"results":"32","hashOfConfig":"19"},{"size":4222,"mtime":1615459016882,"results":"33","hashOfConfig":"19"},{"size":1182,"mtime":1615461034947,"results":"34","hashOfConfig":"19"},{"size":3173,"mtime":1615459026200,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"7humyy",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/index.js",[],["78","79"],"/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/reportWebVitals.js",[],"/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/App.js",[],"/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Total_alliance.js",["80"],"import React from 'react';\nimport Total_alliance_chart from './Total_alliance_chart';\nimport './Total_alliance.css';\n\nclass Total_alliance extends React.Component{\n    constructor(props){\n      super(props);\n      this.state ={\n        id: \"chart-1\"\n      }\n    }\n  \n    render(){\n      return (\n        <div className=\"App\">\n            <h2>Global cooperations</h2>\n              <div id=\"manual\">\n               <p>Explore formal alliances among countries effective by 2012.</p>\n               <p>Light-blue colored packing circles represent each alliance, and the blue circles in them represent the associated countries. The size of each blue circle shows the relative magnitude of the military expenditure of that country. You can zoom into a specific alliance for detailed view with a click, and zoom out if you click it again.</p>\n              </div>\n            <div id=\"container\"> </div>\n            <Total_alliance_chart/>\n        </div>\n      );\n    }\n  \n  }\n  \n  export default Total_alliance;\n  ","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Home.js",[],"/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Alliance.js",["81"],"import React from 'react';\nimport Alliance_chart from './Alliance_chart';\nimport './Alliance.css';\n\nclass Alliance extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      id: \"chart-1\"\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <h2>Alliances vs Threats</h2>\n          <div id=\"container\"> </div>\n        <Alliance_chart/>\n      </div>\n    );\n  }\n\n}\n\nexport default Alliance;\n","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Threat.js",["82"],"import React from 'react';\nimport Threat_chart from './Threat_chart';\nimport './Threat.css';\n\nclass Threat extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      id: \"chart-1\"\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <h2>Disputes map</h2>\n        <div id = \"vis\">\n          <div id=\"container\"> </div>\n        </div>\n        <Threat_chart/>\n      </div>\n    );\n  }\n\n}\n\nexport default Threat;\n","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/components/Header.js",[],"/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Total_alliance_chart.js",["83","84","85","86","87","88","89","90"],"import React, {Component} from 'react';\nimport ccodes from  '../datasets/COW country codes.csv';\nimport mil from  '../datasets/Military_expenditure.csv';\nimport allyDB from '../datasets/alliance_v4.1_by_member.csv';\nimport * as d3 from \"d3\";\n\nclass Total_alliance_chart extends Component{\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    drawChart(){\n      // load ccodes data\n      d3.csv(ccodes)\n      .then(csv => {\n        var codemap_dup = csv.map(row => {\n          return {\n            name: String(row['StateNme']),\n            code: String(row['CCode'])\n          }\n          })\n        \n        // remove duplicate codes\n        var codemap = codemap_dup.reduce((unique, o) => {\n          if(!unique.some(obj => obj.name === o.name && obj.code === o.code)) {\n            unique.push(o);\n          }\n          return unique;\n        },[]);\n\n        // load military expenditure dataset\n        d3.csv(mil)\n        .then(csv => {             \n          // create data by selecting two columns from csv \n          var entire_mil_exp = csv.map(row => {\n            return {\n              name: String(row['Name']),\n              mil: Number(row['2018'])\n            }\n          })\n\n          // load alliance dataset\n          d3.csv(allyDB)\n          .then(csv =>{\n            // select meaningful columns\n            var allianceDB_raw = csv.map(row => {\n              return {\n                allyID: Number(row['version4id']),\n                ccode: Number(row['ccode']),\n                styear: Number(row['all_st_year']),\n                type: String(row['ss_type']),\n                endyear: Number(row['all_end_year'])\n              }\n            });\n\n            function filter_effective(array) {\n              var effectives = array.filter(alliance => alliance.endyear == \"\")\n              var mutual_defense = effectives.filter(alliance => alliance.type == \"Type I: Defense Pact\" || alliance.type == \"Type III: Entente\")\n              return mutual_defense;\n              }\n            \n            // filter still effective and about mutual defense alliances\n            var allianceDB_dup = filter_effective(allianceDB_raw);\n\n            // remove duplicate data\n            var allianceDB = allianceDB_dup.reduce((unique, o) => {\n              if(!unique.some(obj => obj.allyID === o.allyID && obj.ccode === o.ccode)) {\n                unique.push(o);\n              }\n              return unique;\n            },[]);\n\n            console.log(allianceDB)\n\n            // get list of alliances\n            var allianceList = new Set()\n            allianceDB.forEach(alli => {\n              allianceList.add(alli.allyID)\n            })\n\n            console.log(allianceList)\n\n            var chartData = {\n              name: \"Global Cooperations\",\n              children: []\n            }\n\n            // for each alliance\n            allianceList.forEach(alli => {\n              var associated_countries = []\n              // find countries match that alliance\n              allianceDB.forEach(country => {\n                if(country.allyID == alli){\n                  codemap.forEach(cd =>{\n                    // translate ccode of each country\n                    if(country.ccode == cd.code){\n                      // get military expenditure\n                      entire_mil_exp.forEach(dat =>{\n                        if (dat.name == cd.name) {\n                          // add item to buffer\n                          associated_countries.push({\n                            name: cd.name,\n                            value: dat.mil\n                          }) \n                        }\n                      })\n                    }\n                  })\n                }\n              })\n              // if each alliance has information of at least two associated countries\n              if (associated_countries.length > 1){\n                // add item to chart data\n                chartData.children.push({name: \"\", children: associated_countries}) \n              }\n            })\n\n            // End of preprocessing\n            console.log(chartData)\n\n            // parameters for visualization\n\n            const dimensions = ({\n              width: 1500,\n              height: 1500,\n              margin: 50,\n            })\n\n            const format = d3.format(\",d\")\n\n            const color = d3.scaleLinear()\n            .domain([0, 3])\n            .range([\"hsl(220,90%,90%)\", \"hsl(230,50%,40%)\"])\n            .interpolate(d3.interpolateHcl)\n\n            // pack data\n            var root = d3.pack()\n              .size([dimensions.width, dimensions.height])\n              .padding(3)\n            (d3.hierarchy(chartData)\n              .sum(d => d.value))\n              .sort((a, b) => b.value - a.value)\n\n            // start visualize\n            var focus = root;\n            var view;\n\n            const svg = d3.select(\"#container\")\n                .append(\"svg\")\n                  .attr(\"viewBox\", `-${dimensions.width / 2} -${dimensions.height / 2} ${dimensions.width} ${dimensions.height}`)\n                  .style(\"display\", \"block\")\n                  .style(\"margin\", \"0 -14px\")\n                  .style(\"background\", color(0))\n                  .style(\"cursor\", \"pointer\")\n                  .on(\"click\", (event) => zoom(event, root));\n\n            const node = svg.append(\"g\")\n              .selectAll(\"circle\")\n              .data(root.descendants().slice(1))\n              .join(\"circle\")\n                .attr(\"fill\", d => d.children ? color(d.depth) : \"#000091\")\n                .attr(\"pointer-events\", d => !d.children ? \"none\" : null)\n                .on(\"mouseover\", function() { d3.select(this).attr(\"stroke\", \"#000\"); })\n                .on(\"mouseout\", function() { d3.select(this).attr(\"stroke\", null); })\n                .on(\"click\", (event, d) => focus !== d && (zoom(event, d), event.stopPropagation()));\n\n            const label = svg.append(\"g\")\n                .style(\"font\", \"20px sans-serif\")\n                .style(\"fill\", \"white\")\n                .attr(\"pointer-events\", \"none\")\n                .attr(\"text-anchor\", \"middle\")\n              .selectAll(\"text\")\n              .data(root.descendants())\n              .join(\"text\")\n                .style(\"fill-opacity\", d => d.parent === root ? 1 : 0)\n                .style(\"display\", d => d.parent === root ? \"inline\" : \"none\")\n                .text(d => d.data.name);\n\n            zoomTo([root.x, root.y, root.r * 2]);\n\n            function zoomTo(v) {\n              const k = dimensions.width / v[2];\n\n              view = v;\n\n              label.attr(\"transform\", d => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`);\n              node.attr(\"transform\", d => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`);\n              node.attr(\"r\", d => d.r * k);\n            }\n\n            function zoom(event, d) {\n              const focus0 = focus;\n\n              focus = d;\n\n              const transition = svg.transition()\n                  .duration(event.altKey ? 7500 : 750)\n                  .tween(\"zoom\", d => {\n                    const i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2]);\n                    return t => zoomTo(i(t));\n                  });\n\n              label\n                .filter(function(d) { return d.parent === focus || this.style.display === \"inline\"; })\n                .transition(transition)\n                  .style(\"fill-opacity\", d => d.parent === focus ? 1 : 0)\n                  .on(\"start\", function(d) { if (d.parent === focus) this.style.display = \"inline\"; })\n                  .on(\"end\", function(d) { if (d.parent !== focus) this.style.display = \"none\"; });\n            }\n\n\n          })\n        })\n      })\n    }\n\n    render(){\n        return <div id={\"#\" + this.props.id}></div>\n    }\n}\n\nexport default Total_alliance_chart;","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Alliance_chart.js",["91","92","93","94","95","96","97","98","99","100","101","102","103","104"],"import React, {Component} from 'react';\nimport ccodes from  '../datasets/COW country codes.csv';\nimport MIDB from '../datasets/MIDB 5.0.csv';\nimport mil from  '../datasets/Military_expenditure.csv';\nimport allyDB from '../datasets/alliance_v4.1_by_member.csv';\nimport * as d3 from \"d3\";\n\nclass Alliance_chart extends Component{\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    drawChart(){\n      // load json file for the map\n      const topojson_countries = require('../datasets/countries-110m.json');\n      \n      const topojson = require(\"topojson\");\n      const countries_objects = topojson.feature(topojson_countries, topojson_countries.objects.countries);\n      const countries = topojson.feature(topojson_countries, topojson_countries.objects.countries).features;\n      const mesh_countries = topojson.mesh(topojson_countries, topojson_countries.objects.countries, function(a, b) { return a !== b; });\n\n      // size of view box\n      const dimensions = ({\n        width: 600,\n        height: 400,\n        margin: 50,\n      })\n\n      // map color\n      const colors = ({\n        stroke_color: \"white\",\n        active_color: \"#2c4566\",\n        inactive_color: \"#9daabd\",\n        background_color: \"#e4e9f0\",\n        tooltip_color: \"#21334f\",\n        tooltip_background: \"rgba(237, 244, 255, 0.7)\"\n      })\n\n      // packed circle color\n      const cc_colors = [\"#004ecc\", \"#c90000\", \"#c7c9ff\", \"#ffa8a8\"]  // friendly, hostile, friedly_background, hostile_background\n\n      // size\n      const size = ({\n        width: 300,\n        height: 200\n      })\n\n      // Visualize world map\n      var svg = d3.select('#container')\n        .append('svg')\n          .attr(\"viewBox\", [0, 0, dimensions.width, dimensions.height])\n          .attr(\"class\", \"globe\")\n          .on(\"click\", reset);\n\n      svg.append(\"rect\")\n        .attr(\"width\", dimensions.width)\n        .attr(\"height\", dimensions.height)\n        .attr(\"fill\", colors.background_color);\n\n      var projectionMercator = d3.geoEquirectangular()\n                                .translate([dimensions.width / 2, dimensions.height / 2])\n                                .rotate([0, 0])\n                                .fitSize([dimensions.width, dimensions.height], countries_objects);\n                                  // note: use topojson objects (w/ type: FeatureCollection) to fitsize\n      \n      var geoMercator = d3.geoMercator()\n                          .center([0, 0])\n                          .fitSize([dimensions.width, dimensions.height], countries);\n\n      var path = d3.geoPath()\n                    .projection(projectionMercator);\n      \n      const zoom = d3.zoom()\n                      .scaleExtent([1, 10])\n                      .on(\"zoom\", zoomed);\n    \n      var g = svg.append(\"g\");\n\n      var tooltip = d3.select(\"body\").append(\"div\")\n        .attr(\"class\", \"tooltip\")\n    \n      g.selectAll(\"path\")\n        .data(countries)\n        .enter().append(\"path\")\n        .attr(\"d\", path)\n        .style(\"fill\", colors.inactive_color)\n        .attr(\"class\", \"country\")\n        .on(\"click\", clicked)\n        .on('mouseenter', function(event, d) { \n          d3.select(this)\n            .transition()\n            .delay(100)\n            .style(\"fill\", colors.active_color);\n          tooltip.html(\n              `<div><strong> ${d.properties.name}</strong></div>`)\n                .style('visibility', 'visible');\n        })\n        .on('mouseleave', function(d) { \n          d3.select(this)\n            .transition()\n            .delay(100)\n            .style(\"fill\", colors.inactive_color);\n          tooltip.html(``).style('visibility', 'hidden');\n        })     \n        .on('mousemove', function (event, d) {\n              tooltip\n                .style('top', event.pageY - 10 + 'px')\n                .style('left', event.pageX + 10 + 'px');\n        });\n      \n        g.append(\"path\")\n          .data(mesh_countries)\n          .attr(\"class\", \"mesh\")\n          .attr('stroke-linejoin', 'round')\n          .style(\"stroke\", colors.stroke_color)\n          .style(\"stroke-width\", \"1px\")\n          .attr(\"d\", path);\n    \n      svg.call(zoom);\n\n      function clicked(event, d) {\n        const [[x0, y0], [x1, y1]] = path.bounds(d);\n        event.stopPropagation();\n\n        //remove previous circles\n        d3.selectAll(\"circle\").remove();\n\n        var ccode = 0\n        var found = false\n\n        svg.transition().duration(750).call(\n          zoom.transform,\n          d3.zoomIdentity\n            .translate(dimensions.width / 2, dimensions.height / 2)\n            .scale(Math.min(3, 0.9 / Math.max((x1 - x0) / dimensions.width, (y1 - y0) / dimensions.height)))\n            .translate(-(x0 + x1) / 2, -(y0 + y1) / 2),\n        );\n\n        /// start preprocessing ///\n        // load ccodes data\n        d3.csv(ccodes)\n          .then(csv => {\n            var codemap_dup = csv.map(row => {\n              return {\n                name: String(row['StateNme']),\n                code: String(row['CCode'])\n              }\n              })\n            \n            // remove duplicate codes\n            var codemap = codemap_dup.reduce((unique, o) => {\n              if(!unique.some(obj => obj.name === o.name && obj.code === o.code)) {\n                unique.push(o);\n              }\n              return unique;\n            },[]);\n\n            // find ccode of selected\n            codemap.forEach(country =>{\n              if (country.name === d.properties.name) {\n                found = true\n                ccode = country.code\n              }\n            })\n            if (found){\n              // search dispute dataset\n              d3.csv(MIDB)\n                .then(csv =>{\n\n                  // select meaningful columns\n                  var disputes = csv.map(row => {\n                    return {\n                      dispnum: Number(row['dispnum']),\n                      ccode: Number(row['ccode']),\n                      styear: Number(row['styear'])\n                    }\n                  })\n\n                  // get disputes of the selected country\n                  var sel_disp = []                  \n\n                  disputes.forEach(disp => {\n                    if (disp.ccode == ccode && disp.styear > 1990){   // filter disputes after 1990\n                      sel_disp.push(disp.dispnum)\n                    }\n                  })\n\n                  // get ccodes of hostile countries\n                  var threats = new Set()\n                  disputes.forEach(disp =>{\n                    if (sel_disp.includes(disp.dispnum) && disp.ccode != ccode){\n                      threats.add(disp.ccode)\n                    }\n                  })\n\n                  // get military expenditure of selected country and threats\n                  d3.csv(mil)\n                    .then(csv => {             \n                      // create data by selecting two columns from csv \n                      var entire_mil_exp = csv.map(row => {\n                        return {\n                          name: String(row['Name']),\n                          mil: Number(row['2018'])\n                        }\n                      })\n\n                      var formattedData = []\n                      // add the selected county itself to formatted data\n                      codemap.forEach(cd => {\n                        if (ccode == cd.code){\n                          // get military expenditure\n                          entire_mil_exp.forEach(dat =>{\n                            if (dat.name == cd.name) {\n                              // add item to chart data\n                              formattedData.push({\n                                threat: 0,   // not threat, that is, friendly\n                                value: dat.mil,\n                                name: cd.name\n                              })  \n                            }\n                          })\n                        }\n                      })\n\n                      // for each threat country\n                      threats.forEach(country =>{\n                        // map ccode to name\n                        codemap.forEach(cd => {\n                          if (country == cd.code){\n                            // get military expenditure\n                            entire_mil_exp.forEach(dat =>{\n                              if (dat.name == cd.name) {\n                                // add item to formatted data\n                                formattedData.push({\n                                  threat: 1,\n                                  value: dat.mil,\n                                  name: cd.name\n                                })  \n                              }\n                            })\n                          }\n                        })\n                      })\n\n                      // search alliance dataset\n                      d3.csv(allyDB)\n                      .then(csv =>{\n                        // select meaningful columns\n                        var allianceDB_raw = csv.map(row => {\n                          return {\n                            allyID: Number(row['version4id']),\n                            ccode: Number(row['ccode']),\n                            styear: Number(row['all_st_year']),\n                            type: String(row['ss_type']),\n                            endyear: Number(row['all_end_year'])\n                          }\n                        });\n\n                        function filter_effective(array) {\n                          var effectives = array.filter(alliance => alliance.endyear == \"\")\n                          var mutual_defense = effectives.filter(alliance => alliance.type == \"Type I: Defense Pact\" || alliance.type == \"Type III: Entente\")\n                          return mutual_defense;\n                          }\n                        \n                        // filter still effective and about mutual defense alliances\n                        var allianceDB_dup = filter_effective(allianceDB_raw);\n                        \n                        // remove duplicate data\n                        var allianceDB = allianceDB_dup.reduce((unique, o) => {\n                          if(!unique.some(obj => obj.allyID === o.allyID && obj.ccode === o.ccode)) {\n                            unique.push(o);\n                          }\n                          return unique;\n                        },[]);\n\n                        console.log(allianceDB)\n                        \n                        // get alliances of selected country\n                        var sel_alli = [];\n\n                        allianceDB.forEach(alli => {\n                          if (alli.ccode == ccode){\n                            sel_alli.push(alli.allyID)\n                          }\n                        })\n\n                        console.log(sel_alli)\n\n                        // get ccode of allied countries\n                        var alliances = new Set();\n                        allianceDB.forEach(alli => {\n                          if (sel_alli.includes(alli.allyID) && alli.ccode != ccode){\n                            alliances.add(alli.ccode)\n                          }  \n                        })\n\n                        console.log(alliances)\n\n                        // for each allied country\n                        alliances.forEach(country =>{\n                          // map ccode to name\n                          codemap.forEach(cd => {\n                            if (country == cd.code){\n                              // get military expenditure\n                              entire_mil_exp.forEach(dat =>{\n                                if (dat.name == cd.name) {\n                                  // add item to formatted data\n                                  formattedData.push({\n                                    threat: 0,\n                                    value: dat.mil,\n                                    name: cd.name\n                                  })  \n                                }\n                              })\n                            }\n                          })\n                        })  \n\n                        // convert to chart data format\n                        var chartData = ({\n                          children: Array.from(\n                            d3.group(\n                              formattedData,\n                              d => d.threat\n                            ),\n                            ([, children]) => ({children})\n                          )\n                        })\n\n                        // pack data\n                        const root = d3.pack()\n                          .size([size.width, size.height])\n                          .padding(1)\n                        (d3.hierarchy(chartData)\n                          .sum(d => d.value))\n                                            \n                        // draw background circles\n                        svg.append(\"g\")\n                            .attr(\"stroke\", \"#ccc\")\n                          .selectAll(\"circle\")\n                          .data(root.descendants().filter(d => d.height === 1))\n                          .join(\"circle\")\n                            .attr(\"cx\", d => d.x)\n                            .attr(\"cy\", d => d.y)\n                            .attr(\"r\", d => d.r)\n                            .attr(\"fill\", d => cc_colors[d.data.children[0].threat+2]);\n\n                        // put packed circles\n                        svg.append(\"g\")\n                          .selectAll(\"circle\")\n                          .data(root.leaves())\n                          .join(\"circle\")\n                            .attr(\"cx\", d => d.x)\n                            .attr(\"cy\", d => d.y)\n                            .attr(\"r\", d => d.r)\n                            .attr(\"fill\", d => cc_colors[d.data.threat])\n                          .append(\"title\")\n                            .text(d => `${d.data.name} \\n${d.data.value.toLocaleString('en-US', {\n                              style: 'currency',\n                              currency: 'USD',\n                            })}`) \n\n                        console.log(chartData)                      \n                      });\n                    })\n                })\n            } else {\n              // print No data\n            }\n          })\n      }\n      \n      function reset() {\n        svg.transition().duration(750).call(\n          zoom.transform,\n          d3.zoomIdentity,\n          d3.zoomTransform(svg.node()).invert([dimensions.width / 2, dimensions.height / 2])\n        );\n        \n        //remove previous circles\n        d3.selectAll(\"circle\").remove();\n      }\n      \n      function zoomed(event) {\n        const {transform} = event;\n        g.attr(\"transform\", transform);\n        g.attr(\"stroke-width\", 1 / transform.k);\n      }\n    }\n\n    render(){\n        return <div id={\"#\" + this.props.id}></div>\n    }\n}\n\nexport default Alliance_chart;","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Threat_chart.js",["105","106","107","108","109","110","111"],"import React, {Component} from 'react';\nimport ccodes from  '../datasets/COW country codes.csv';\nimport MIDB from '../datasets/MIDB 5.0.csv';\nimport mil from  '../datasets/Military_expenditure.csv';\nimport * as d3 from \"d3\";\n\nclass Threat_chart extends Component{\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    drawChart(){\n      // load json file for the map\n      const topojson_countries = require('../datasets/countries-110m.json');\n      \n      const topojson = require(\"topojson\");\n      const countries_objects = topojson.feature(topojson_countries, topojson_countries.objects.countries);\n      const countries = topojson.feature(topojson_countries, topojson_countries.objects.countries).features;\n      const mesh_countries = topojson.mesh(topojson_countries, topojson_countries.objects.countries, function(a, b) { return a !== b; });\n\n      // size of view box\n      const dimensions = ({\n        width: 600,\n        height: 400,\n        margin: 50,\n      })\n\n      // map color\n      const colors = ({\n        stroke_color: \"white\",\n        active_color: \"#2c4566\",\n        inactive_color: \"#9daabd\",\n        background_color: \"#e4e9f0\",\n        tooltip_color: \"#21334f\",\n        tooltip_background: \"rgba(237, 244, 255, 0.7)\"\n      })\n\n      // packed circle color\n      const cc_colors = [\"#004ecc\", \"#c90000\", \"#c7c9ff\", \"#ffa8a8\"]  // friendly, hostile, friedly_background, hostile_background\n\n      // size\n      const size = ({\n        width: 300,\n        height: 200\n      })\n\n      // Visualize world map\n      var svg = d3.select('#container')\n        .append('svg')\n          .attr(\"viewBox\", [0, 0, dimensions.width, dimensions.height])\n          .attr(\"class\", \"globe\")\n          .on(\"click\", reset);\n\n      svg.append(\"rect\")\n        .attr(\"width\", dimensions.width)\n        .attr(\"height\", dimensions.height)\n        .attr(\"fill\", colors.background_color);\n\n      var projectionMercator = d3.geoEquirectangular()\n                                .translate([dimensions.width / 2, dimensions.height / 2])\n                                .rotate([0, 0])\n                                .fitSize([dimensions.width, dimensions.height], countries_objects);\n                                  // note: use topojson objects (w/ type: FeatureCollection) to fitsize\n      \n      var geoMercator = d3.geoMercator()\n                          .center([0, 0])\n                          .fitSize([dimensions.width, dimensions.height], countries);\n\n      var path = d3.geoPath()\n                    .projection(projectionMercator);\n      \n      const zoom = d3.zoom()\n                      .scaleExtent([1, 10])\n                      .on(\"zoom\", zoomed);\n    \n      var g = svg.append(\"g\");\n\n      var tooltip = d3.select(\"body\").append(\"div\")\n        .attr(\"class\", \"tooltip\")\n    \n      g.selectAll(\"path\")\n        .data(countries)\n        .enter().append(\"path\")\n        .attr(\"d\", path)\n        .style(\"fill\", colors.inactive_color)\n        .attr(\"class\", \"country\")\n        .on(\"click\", clicked)\n        .on('mouseenter', function(event, d) { \n          d3.select(this)\n            .transition()\n            .delay(100)\n            .style(\"fill\", colors.active_color);\n          tooltip.html(\n              `<div><strong> ${d.properties.name}</strong></div>`)\n                .style('visibility', 'visible');\n        })\n        .on('mouseleave', function(d) { \n          d3.select(this)\n            .transition()\n            .delay(100)\n            .style(\"fill\", colors.inactive_color);\n          tooltip.html(``).style('visibility', 'hidden');\n        })     \n        .on('mousemove', function (event, d) {\n              tooltip\n                .style('top', event.pageY - 10 + 'px')\n                .style('left', event.pageX + 10 + 'px');\n        });\n      \n        g.append(\"path\")\n          .data(mesh_countries)\n          .attr(\"class\", \"mesh\")\n          .attr('stroke-linejoin', 'round')\n          .style(\"stroke\", colors.stroke_color)\n          .style(\"stroke-width\", \"1px\")\n          .attr(\"d\", path);\n    \n      svg.call(zoom);\n\n      function clicked(event, d) {\n        const [[x0, y0], [x1, y1]] = path.bounds(d);\n        event.stopPropagation();\n\n        //remove previous circles\n        d3.selectAll(\"circle\").remove();\n\n        var ccode = 0\n        var found = false\n\n        svg.transition().duration(750).call(\n          zoom.transform,\n          d3.zoomIdentity\n            .translate(dimensions.width / 2, dimensions.height / 2)\n            .scale(Math.min(3, 0.9 / Math.max((x1 - x0) / dimensions.width, (y1 - y0) / dimensions.height)))\n            .translate(-(x0 + x1) / 2, -(y0 + y1) / 2),\n        );\n\n        /// start preprocessing ///\n        // load ccodes data\n        d3.csv(ccodes)\n          .then(csv => {\n            var codemap_dup = csv.map(row => {\n              return {\n                name: String(row['StateNme']),\n                code: String(row['CCode'])\n              }\n              })\n            \n            // remove duplicate codes\n            var codemap = codemap_dup.reduce((unique, o) => {\n              if(!unique.some(obj => obj.name === o.name && obj.code === o.code)) {\n                unique.push(o);\n              }\n              return unique;\n            },[]);\n\n            // find ccode of selected\n            codemap.forEach(country =>{\n              if (country.name === d.properties.name) {\n                found = true\n                ccode = country.code\n              }\n            })\n            if (found){\n              // search dispute dataset\n              d3.csv(MIDB)\n                .then(csv =>{\n\n                  // select meaningful columns\n                  var disputes = csv.map(row => {\n                    return {\n                      dispnum: Number(row['dispnum']),\n                      ccode: Number(row['ccode']),\n                      styear: Number(row['styear'])\n                    }\n                  })\n\n                  // get disputes of the selected country\n                  var sel_disp = []                  \n\n                  disputes.forEach(disp => {\n                    if (disp.ccode == ccode && disp.styear > 1990){   // filter disputes after 1990\n                      sel_disp.push(disp.dispnum)\n                    }\n                  })\n\n                  // get ccodes of hostile countries\n                  var threats = new Set()\n                  disputes.forEach(disp =>{\n                    if (sel_disp.includes(disp.dispnum) && disp.ccode != ccode){\n                      threats.add(disp.ccode)\n                    }\n                  })\n\n                  // get military expenditure of selected country and threats\n                  d3.csv(mil)\n                    .then(csv => {             \n                      // create data by selecting two columns from csv \n                      var entire_mil_exp = csv.map(row => {\n                        return {\n                          name: String(row['Name']),\n                          mil: Number(row['2018'])\n                        }\n                      })\n\n                      var formattedData = []\n                      // add the selected county itself to formatted data\n                      codemap.forEach(cd => {\n                        if (ccode == cd.code){\n                          // get military expenditure\n                          entire_mil_exp.forEach(dat =>{\n                            if (dat.name == cd.name) {\n                              // add item to chart data\n                              formattedData.push({\n                                threat: 0,   // not threat, that is, friendly\n                                value: dat.mil,\n                                name: cd.name\n                              })  \n                            }\n                          })\n                        }\n                      })\n\n                      // for each threat country\n                      threats.forEach(country =>{\n                        // map ccode to name\n                        codemap.forEach(cd => {\n                          if (country == cd.code){\n                            // get military expenditure\n                            entire_mil_exp.forEach(dat =>{\n                              if (dat.name == cd.name) {\n                                // add item to formatted data\n                                formattedData.push({\n                                  threat: 1,\n                                  value: dat.mil,\n                                  name: cd.name\n                                })  \n                              }\n                            })\n                          }\n                        })\n                      })\n\n                      // convert to chart data format\n                      var chartData = ({\n                        children: Array.from(\n                          d3.group(\n                            formattedData,\n                            d => d.threat\n                          ),\n                          ([, children]) => ({children})\n                        )\n                      })\n\n                      // pack data\n                      const root = d3.pack()\n                        .size([size.width, size.height])\n                        .padding(1)\n                      (d3.hierarchy(chartData)\n                        .sum(d => d.value))\n                                           \n                      // draw background circles\n                      svg.append(\"g\")\n                          .attr(\"stroke\", \"#ccc\")\n                        .selectAll(\"circle\")\n                        .data(root.descendants().filter(d => d.height === 1))\n                        .join(\"circle\")\n                          .attr(\"cx\", d => d.x)\n                          .attr(\"cy\", d => d.y)\n                          .attr(\"r\", d => d.r)\n                          .attr(\"fill\", d => cc_colors[d.data.children[0].threat+2]);\n\n                      // put packed circles\n                      svg.append(\"g\")\n                        .selectAll(\"circle\")\n                        .data(root.leaves())\n                        .join(\"circle\")\n                          .attr(\"cx\", d => d.x)\n                          .attr(\"cy\", d => d.y)\n                          .attr(\"r\", d => d.r)\n                          .attr(\"fill\", d => cc_colors[d.data.threat])\n                        .append(\"title\")\n                          .text(d => `${d.data.name} \\n${d.data.value.toLocaleString('en-US', {\n                            style: 'currency',\n                            currency: 'USD',\n                          })}`)         \n\n                      console.log(root.descendants())\n\n                      console.log(chartData)\n                    })\n                })\n            } else {\n              // print No data\n            }\n          })\n      }\n      \n      function reset() {\n        svg.transition().duration(750).call(\n          zoom.transform,\n          d3.zoomIdentity,\n          d3.zoomTransform(svg.node()).invert([dimensions.width / 2, dimensions.height / 2])\n        );\n        \n        //remove previous circles\n        d3.selectAll(\"circle\").remove();\n      }\n      \n      function zoomed(event) {\n        const {transform} = event;\n        g.attr(\"transform\", transform);\n        g.attr(\"stroke-width\", 1 / transform.k);\n      }\n    }\n\n    render(){\n        return <div id={\"#\" + this.props.id}></div>\n    }\n}\n\nexport default Threat_chart;","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/GDP.js",["112"],"import React from 'react';\nimport GDP_chart from './GDP_chart';\nimport './GDP.css';\n\nclass GDP extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: \"chart-1\"\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2> Military Expenditure and GDP By Year </h2>\n        <h4> <li>Press 'start' button to play the animation. Press 'stop' to stop at a certain year.</li>\n        <li>Double-click or spin the wheel to zoom, then \n          click-and-drag to pan (translate).</li>\n        <li>Hover your mouse over a circle for info. ( GDP/ Military Expenditure/ country )</li></h4>\n        <div id=\"slider\">\n          <label for=\"nyears\"> Year = <span id=\"nyears-value\">...</span> </label>\n          <input id=\"nyears\" type=\"range\" name=\"years\" min=\"1960\" max=\"2018\"></input>\n          <button type=\"button\" id=\"start\">start</button>\n          <button type=\"button\" id=\"stop\">stop</button>\n        </div>\n\n        <div id=\"container\">\n          <div id=\"tooltip\"></div>\n        </div>\n        <div id=\"box\"></div>\n        <GDP_chart data={this.state.data} width={this.state.width} height={this.state.height} />\n      </div>\n    );\n  }\n\n}\n\nexport default GDP;\n","/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/GDP_chart.js",[],"/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Area.js",[],"/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/AreaChart.js",[],"/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/Area2.js",[],"/Users/minskim/Documents/GitHub/ECS272-Winter2021/FinalProject/group9/src/routes/AreaChart2.js",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":22,"column":13,"nodeType":"119","endLine":22,"endColumn":36},{"ruleId":"117","severity":1,"message":"120","line":18,"column":9,"nodeType":"119","endLine":18,"endColumn":26},{"ruleId":"117","severity":1,"message":"121","line":20,"column":9,"nodeType":"119","endLine":20,"endColumn":24},{"ruleId":"122","severity":1,"message":"123","line":58,"column":74,"nodeType":"124","messageId":"125","endLine":58,"endColumn":76},{"ruleId":"122","severity":1,"message":"123","line":59,"column":80,"nodeType":"124","messageId":"125","endLine":59,"endColumn":82},{"ruleId":"122","severity":1,"message":"123","line":59,"column":123,"nodeType":"124","messageId":"125","endLine":59,"endColumn":125},{"ruleId":"122","severity":1,"message":"123","line":94,"column":35,"nodeType":"124","messageId":"125","endLine":94,"endColumn":37},{"ruleId":"122","severity":1,"message":"123","line":97,"column":38,"nodeType":"124","messageId":"125","endLine":97,"endColumn":40},{"ruleId":"122","severity":1,"message":"123","line":100,"column":38,"nodeType":"124","messageId":"125","endLine":100,"endColumn":40},{"ruleId":"126","severity":1,"message":"127","line":130,"column":19,"nodeType":"128","messageId":"129","endLine":130,"endColumn":25},{"ruleId":"126","severity":1,"message":"130","line":193,"column":21,"nodeType":"128","messageId":"129","endLine":193,"endColumn":27},{"ruleId":"126","severity":1,"message":"131","line":67,"column":11,"nodeType":"128","messageId":"129","endLine":67,"endColumn":22},{"ruleId":"122","severity":1,"message":"123","line":184,"column":36,"nodeType":"124","messageId":"125","endLine":184,"endColumn":38},{"ruleId":"122","severity":1,"message":"132","line":192,"column":71,"nodeType":"124","messageId":"125","endLine":192,"endColumn":73},{"ruleId":"122","severity":1,"message":"123","line":211,"column":35,"nodeType":"124","messageId":"125","endLine":211,"endColumn":37},{"ruleId":"122","severity":1,"message":"123","line":214,"column":42,"nodeType":"124","messageId":"125","endLine":214,"endColumn":44},{"ruleId":"122","severity":1,"message":"123","line":230,"column":39,"nodeType":"124","messageId":"125","endLine":230,"endColumn":41},{"ruleId":"122","severity":1,"message":"123","line":233,"column":44,"nodeType":"124","messageId":"125","endLine":233,"endColumn":46},{"ruleId":"122","severity":1,"message":"123","line":261,"column":86,"nodeType":"124","messageId":"125","endLine":261,"endColumn":88},{"ruleId":"122","severity":1,"message":"123","line":262,"column":92,"nodeType":"124","messageId":"125","endLine":262,"endColumn":94},{"ruleId":"122","severity":1,"message":"123","line":262,"column":135,"nodeType":"124","messageId":"125","endLine":262,"endColumn":137},{"ruleId":"122","severity":1,"message":"123","line":283,"column":42,"nodeType":"124","messageId":"125","endLine":283,"endColumn":44},{"ruleId":"122","severity":1,"message":"132","line":293,"column":76,"nodeType":"124","messageId":"125","endLine":293,"endColumn":78},{"ruleId":"122","severity":1,"message":"123","line":304,"column":41,"nodeType":"124","messageId":"125","endLine":304,"endColumn":43},{"ruleId":"122","severity":1,"message":"123","line":307,"column":46,"nodeType":"124","messageId":"125","endLine":307,"endColumn":48},{"ruleId":"126","severity":1,"message":"131","line":66,"column":11,"nodeType":"128","messageId":"129","endLine":66,"endColumn":22},{"ruleId":"122","severity":1,"message":"123","line":183,"column":36,"nodeType":"124","messageId":"125","endLine":183,"endColumn":38},{"ruleId":"122","severity":1,"message":"132","line":191,"column":71,"nodeType":"124","messageId":"125","endLine":191,"endColumn":73},{"ruleId":"122","severity":1,"message":"123","line":210,"column":35,"nodeType":"124","messageId":"125","endLine":210,"endColumn":37},{"ruleId":"122","severity":1,"message":"123","line":213,"column":42,"nodeType":"124","messageId":"125","endLine":213,"endColumn":44},{"ruleId":"122","severity":1,"message":"123","line":229,"column":39,"nodeType":"124","messageId":"125","endLine":229,"endColumn":41},{"ruleId":"122","severity":1,"message":"123","line":232,"column":44,"nodeType":"124","messageId":"125","endLine":232,"endColumn":46},{"ruleId":"117","severity":1,"message":"133","line":32,"column":9,"nodeType":"119","endLine":32,"endColumn":97},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"react/jsx-pascal-case","Imported JSX component Total_alliance_chart must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component Alliance_chart must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Threat_chart must be in PascalCase or SCREAMING_SNAKE_CASE","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'format' is assigned a value but never used.","Identifier","unusedVar","'focus0' is assigned a value but never used.","'geoMercator' is assigned a value but never used.","Expected '!==' and instead saw '!='.","Imported JSX component GDP_chart must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation"]